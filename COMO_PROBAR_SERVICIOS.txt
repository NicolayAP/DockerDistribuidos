# GUÍA DE INSTALACIÓN Y USO DE APLICACIÓN TIENDA

## Nombres de los integrantes
- Nicolas Acosta
- Angel Torres
- Sebastian Niño

## ¿Qué usamos?

- Node.js
- npm
- Docker y Docker Compose (para la base de datos MySQL)
- curl o Postman para pruebas HTTP

ACLARACIÓN: "Cada microservicio tiene una seed que monta algunos datos quemados
para realizar pruebas rapidas (se ejecutan en el archivo server.ts respectivo)"

---

## 1. Levantar la base de datos MySQL con Docker

```
docker-compose up -d
```
Esto creará la base de datos `store_db` y las tablas necesarias.

---

## 2. Instalar dependencias en cada microservicio

### Users Service

```
cd users-service
npm install
```

### Products Service

```
cd ../products-service
npm install
```

### Orders Service

```
cd ../orders-service
npm install
```

---

## 3. Iniciar los microservicios

Abre una terminal para cada servicio y ejecuta:

### Users Service (puerto 3000)

```
cd users-service
npm run dev
```

### Products Service (puerto 3001)

```
cd products-service
npm run dev
```

### Orders Service (puerto 3002)

```
cd orders-service
npm run dev
```

---

## 4. Probar los endpoints

### USERS SERVICE (http://localhost:3000)

- **Obtener todos los usuarios**
  ```
  curl http://localhost:3000/users/getAll
  ```

- **Obtener usuario por ID**
  ```
  curl http://localhost:3000/users/getById/1
  ```

- **Crear usuario**
  ```
  curl -X POST http://localhost:3000/users/createUser -H "Content-Type: application/json" -d '{"name":"Pedro","lastName":"Ramírez","email":"pedro@email.com","password":"pass123"}'
  ```

- **Validar usuario**
  ```
  curl -X POST http://localhost:3000/users/validateUser -H "Content-Type: application/json" -d '{"name":"Juan","password":"1234"}'
  ```

- **Login usuario**
  ```
  curl -X POST http://localhost:3000/users/login -H "Content-Type: application/json" -d '{"email":"JuanPerez@gmail.com","password":"1234"}'
  ```

- **Eliminar usuario**
  ```
  curl -X DELETE http://localhost:3000/users/deleteUser/1
  ```

---

### PRODUCTS SERVICE (http://localhost:3001)

- **Crear producto**
  ```
  curl -X POST http://localhost:3001/products/createProduct -H "Content-Type: application/json" -d '{"name":"Laptop","price":1500,"stock":10,"state":"available","categoryId":1}'
  ```

- **Actualizar producto**
  ```
  curl -X PUT http://localhost:3001/products/updateProduct/1 -H "Content-Type: application/json" -d '{"price":1200,"stock":8}'
  ```

- **Obtener todos los productos y su categoría**
  ```
  curl http://localhost:3001/products/getAllProducts
  ```

- **Eliminar producto**
  ```
  curl -X DELETE http://localhost:3001/products/deleteProduct/1
  ```

---

### ORDERS SERVICE (http://localhost:3002)

- **Crear orden**
  ```
  curl -X POST http://localhost:3002/orders/orders -H "Content-Type: application/json" -d '{"userId":1,"total":150.0}'
  ```

- **Obtener todas las órdenes**
  ```
  curl http://localhost:3002/orders/getAllOrders
  ```

- **Obtener orden por ID**
  ```
  curl http://localhost:3002/orders/getOrderById/1
  ```

- **Obtener órdenes por usuario**
  ```
  curl http://localhost:3002/orders/getOrder/1
  ```

- **Obtener detalles de una orden**
  ```
  curl http://localhost:3002/orders/getDetailOrderById/1
  ```

- **Eliminar orden**
  ```
  curl -X DELETE http://localhost:3002/orders/deleteOrder/1
  ```

---

## 5. Notas sobre la arquitectura

- Cada microservicio es independiente sin embargo se conectan a través de una base de datos compartida.
- La comunicación entre servicios se realiza vía HTTP (sin embargo aún no hay endpoints que lo hagan).

---
